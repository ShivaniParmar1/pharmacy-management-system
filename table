import { useEffect, useState, useCallback, forwardRef } from 'react'

// ** MUI Imports
import Box from '@mui/material/Box'
import Card from '@mui/material/Card'
import Typography from '@mui/material/Typography'
import CardHeader from '@mui/material/CardHeader'
import { DataGrid } from '@mui/x-data-grid'
import toast from 'react-hot-toast'
import api from 'src/interceptors/api'
import authGuard from 'src/helpers/authGuard'
import Grid from '@mui/material/Grid'
import Fade from '@mui/material/Fade'
import { styled } from '@mui/material/styles'
import IconButton from '@mui/material/IconButton'
import { Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, CircularProgress } from '@mui/material'
import Swal from 'sweetalert2'
import withReactContent from 'sweetalert2-react-content'

// ** ThirdParty Components

// ** Custom Components
import CustomAvatar from 'src/@core/components/mui/avatar'
import CustomTextField from 'src/@core/components/mui/text-field'

// ** Utils Import
import { getInitials } from 'src/@core/utils/get-initials'
import Icon from 'src/@core/components/icon'
import ImageUpload from 'src/components/ImageUpload'
import { useRouter } from 'next/router'
import ImageLightbox from 'src/components/LightBox'

const MySwal = withReactContent(Swal)

const PageConfig = {
  listingUrl: `/api/channels/listing`,
  editUrl: '/api/channels/update',
  createUrl: '/api/channels/create',
  deleteUrl: '/api/channels/delete',
  module: '',
  pageTitle: '',
  createText: 'Create Channel',
  createSubText: 'Please Enter admin Details to create an admin User',
  editText: 'Edit Admin',
  editSubText: 'Updating user details will receive a privacy audit.',
  createBtn: true,
  editBtn: false,
  deleteBtn: true,
  columns: [
    {
      flex: 0.03,
      minWidth: 10,
      field: 'id',
      headerName: 'Sr.',
      renderCell: params => (
        <Typography variant='body2' sx={{ color: 'text.primary' }}>
          {params.row.sr}
        </Typography>
      )
    },
    {
      flex: 0.03,
      minWidth: 10,
      field: 'image',
      headerName: 'Image',
      renderCell: params => {
        const url = new URL(params.row.image)

        return <ImageLightbox image={`${url.origin}${url.pathname}`} />
      }
    },
    {
      flex: 0.03,
      minWidth: 10,
      field: 'title',
      headerName: 'Title',
      renderCell: params => (
        <Typography variant='body2' sx={{ color: 'text.primary' }}>
          {params.row.heading}
        </Typography>
      )
    }
  ]
}

const Transition = forwardRef(function Transition(props, ref) {
  return <Fade ref={ref} {...props} />
})

// ** renders client column
const renderClient = params => {
  const { row } = params
  if (row.logo.length) {
    return <CustomAvatar src={row.logo} sx={{ mr: 2.5, width: 38, height: 38 }} />
  }
  const stateNum = Math.floor(Math.random() * 6)
  const states = ['success', 'error', 'warning', 'info', 'primary', 'secondary']
  const color = states[stateNum]

  return (
    <CustomAvatar skin='light' color={color} sx={{ mr: 3, fontSize: '.8rem', width: '1.875rem', height: '1.875rem' }}>
      {getInitials(`${row.name}` || 'John Doe')}
    </CustomAvatar>
  )
}

const UsersTable = () => {
  // ** States

  const router = useRouter()

  const defaultData = {
    name: '',
    logo: '',
    edit: false
  }

  const [total, setTotal] = useState(0)
  const [sort, setSort] = useState('desc')
  const [rows, setRows] = useState([])
  const [searchValue, setSearchValue] = useState('')
  const [sortColumn, setSortColumn] = useState('id')
  const [paginationModel, setPaginationModel] = useState({ page: 0, pageSize: 10 })
  const [show, setShow] = useState(false)
  const [dialogData, setDialogData] = useState(defaultData)

  const AddDialog = ({
    dialogData,
    setShow,
    setDialogData,
    fetchTableData,
    sort,
    searchValue,
    sortColumn,
    show,
    handleClose
  }) => {
    const [prefill, setPrefill] = useState(dialogData)

    const CustomCloseButton = styled(IconButton)(({ theme }) => ({
      top: 0,
      right: 0,
      color: 'grey.500',
      position: 'absolute',
      boxShadow: theme.shadows[2],
      transform: 'translate(10px, -10px)',
      borderRadius: theme.shape.borderRadius,
      backgroundColor: `${theme.palette.background.paper} !important`,
      transition: 'transform 0.25s ease-in-out, box-shadow 0.25s ease-in-out',
      '&:hover': {
        transform: 'translate(7px, -5px)'
      }
    }))

    const handleSubmit = e => {
      e.preventDefault()
      console.log(prefill)

      if (prefill.edit && prefill.edit == false) {
        const form_data = new FormData()

        Object.keys(prefill).map(val => {
          form_data.append(val, prefill[val])
        })
        if (count === 0) {
          return toast.error('nothing to update.')
        }
        api.post(PageConfig.createUrl, form_data).then(res => {
          if (res.data.error) {
            return toast.error(res.data.message)
          }
          fetchTableData(sort, searchValue, sortColumn)

          setDialogData(defaultData)
          setShow(false)

          return toast.success(res.data.message)
        })
      }
      const form_data = new FormData()
      let count = 0
      Object.keys(prefill).map(val => {
        if (val !== 'id' && dialogData[val] === prefill[val]) {
          return
        }
        form_data.append(val, prefill[val])
        count++
      })
      if (count === 0) {
        return toast.error('Nothing to update.')
      }

      api.post(PageConfig.editUrl, form_data).then(res => {
        if (res.data.error) {
          return toast.error(res.data.message)
        }
        fetchTableData(sort, searchValue, sortColumn)

        setDialogData(defaultData)
        setShow(false)

        return toast.success(res.data.message)
      })
    }

    const addValueProps = (name, file = false) => {
      if (!file) {
        return {
          value: prefill[name],
          onChange: e => {
            setPrefill({ ...prefill, [name]: e.target.value })
          }
        }
      }

      return {
        defaultImage: prefill[name],
        onChange: e => {
          setPrefill({ ...prefill, [name]: e.target.files[0] })
        }
      }
    }

    return (
      <Dialog
        fullWidth
        open={show}
        maxWidth='md'
        scroll='body'
        onClose={() => handleClose()}
        TransitionComponent={Transition}
        onBackdropClick={() => handleClose()}
        sx={{ '& .MuiDialog-paper': { overflow: 'visible' } }}
      >
        <DialogContent
          sx={{
            pb: theme => `${theme.spacing(8)} !important`,
            px: theme => [`${theme.spacing(5)} !important`, `${theme.spacing(15)} !important`],
            pt: theme => [`${theme.spacing(8)} !important`, `${theme.spacing(12.5)} !important`]
          }}
        >
          <CustomCloseButton onClick={() => handleClose()}>
            <Icon icon='tabler:x' fontSize='1.25rem' />
          </CustomCloseButton>
          <Box sx={{ mb: 8, textAlign: 'center' }}>
            <Typography variant='h3' sx={{ mb: 3 }}>
              {PageConfig.createText}
            </Typography>
            <Typography sx={{ color: 'text.secondary' }}>
              Updating user details will receive a privacy audit.
            </Typography>
          </Box>
          <Grid container spacing={6}>
            <Grid item sm={6} xs={12}>
              <CustomTextField
                fullWidth
                label='Channel Name'
                placeholder='Enter Channel Name'
                {...addValueProps('name')}
              />
            </Grid>
            <Grid item sm={6} xs={12}>
              <ImageUpload title={'Logo'} {...addValueProps('logo', true)} />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions
          sx={{
            justifyContent: 'center',
            px: theme => [`${theme.spacing(5)} !important`, `${theme.spacing(15)} !important`],
            pb: theme => [`${theme.spacing(8)} !important`, `${theme.spacing(12.5)} !important`]
          }}
        >
          <Button variant='contained' sx={{ mr: 1 }} onClick={handleSubmit}>
            Submit
          </Button>
          <Button variant='tonal' color='secondary' onClick={() => handleClose()}>
            Discard
          </Button>
        </DialogActions>
      </Dialog>
    )
  }
  const columns = PageConfig.columns

  if (PageConfig.editBtn || PageConfig.deleteBtn) {
    columns.push({
      flex: 0.175,
      minWidth: 110,
      field: 'test',
      headerName: 'Action',
      renderCell: params => (
        <Box>
          {PageConfig.editBtn && authGuard.hasPermission('admin', 'update') && (
            <Button
              color='primary'
              onClick={() => {
                setDialogData({ ...params.row, edit: true })
                setShow(true)
              }}
            >
              <Icon icon='mingcute:edit-line' />
            </Button>
          )}
          {PageConfig.deleteBtn && authGuard.hasPermission('admin', 'delete') && (
            <Button
              color='error'
              onClick={() => {
                deleteRecord(params.row)
              }}
            >
              <Icon icon='icon-park-twotone:delete' />
            </Button>
          )}
        </Box>
      )
    })
  }

  const request = async (sort, q, column) => {
    const params = {
      search: q,
      order: sort,
      sort: column,
      limit: paginationModel.pageSize,
      offset: Math.round(Math.round(paginationModel.page) * paginationModel.pageSize)
    }

    if (router.query.id) {
      params.id = router.query.id
    }
    await api
      .post(PageConfig.listingUrl, params)
      .then(res => {
        if (res.data.error) {
          return toast.error(res.data.message)
        }
        setTotal(res.data.data.total)
        setRows(res.data.data.rows)
      })
      .catch(err => {
        console.log(err)
      })
  }

  const deleteRecord = row => {
    MySwal.fire({
      title: 'Are you sure?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes, delete it!'
    }).then(result => {
      if (result.value) {
        api.post(PageConfig.deleteUrl, { id: row.id }).then(res => {
          if (res.data.error) {
            const resMessage = res.data.message
            if (Array.isArray(resMessage)) {
              return toast.error(resMessage[0])
            }

            return toast.error(resMessage)
          }
          fetchTableData(sort, searchValue, sortColumn)

          return MySwal.fire({
            icon: 'success',
            title: 'Deleted!',
            text: 'Deleted Successfully!'
          })
        })
      }
    })
  }

  const fetchTableData = useCallback(
    request,
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [paginationModel]
  )
  useEffect(() => {
    fetchTableData(sort, searchValue, sortColumn)
  }, [fetchTableData, searchValue, sort, sortColumn])

  const handleSortModel = newModel => {
    if (newModel.length) {
      setSort(newModel[0].sort)
      setSortColumn(newModel[0].field)
      fetchTableData(newModel[0].sort, searchValue, newModel[0].field)
    } else {
      setSort('asc')
      setSortColumn('full_name')
    }
  }

  const handleSearch = value => {
    setSearchValue(value)
    fetchTableData(sort, value, sortColumn)
  }

  const handleClose = () => {
    setDialogData(defaultData)
    setShow(false)
  }

  const ServerSideToolbar = props => {
    return (
      <Box
        sx={{
          gap: 2,
          display: 'flex',
          flexWrap: 'wrap',
          alignItems: 'center',
          justifyContent: 'space-between',
          p: theme => theme.spacing(2, 5, 4, 5)
        }}
      >
        <Button>asd</Button>
        <CustomTextField
          value={props.value}
          placeholder='Search…'
          onChange={props.onChange}
          InputProps={{
            startAdornment: (
              <Box sx={{ mr: 2, display: 'flex' }}>
                <Icon fontSize='1.25rem' icon='tabler:search' />
              </Box>
            ),
            endAdornment: (
              <IconButton size='small' title='Clear' aria-label='Clear' onClick={props.clearSearch}>
                <Icon fontSize='1.25rem' icon='tabler:x' />
              </IconButton>
            )
          }}
          sx={{
            width: {
              xs: 1,
              sm: 'auto'
            },
            '& .MuiInputBase-root > svg': {
              mr: 2
            }
          }}
        />
      </Box>
    )
  }

  return (
    <>
      <AddDialog
        {...{ dialogData, setShow, setDialogData, fetchTableData, sort, searchValue, sortColumn, show, handleClose }}
      />
      <Card>
        <CardHeader
          title='Headlines'
          action={
            <>
              {PageConfig.createBtn && authGuard.hasPermission('admin', 'write') && (
                <>
                  <Button variant='contained' size='small' onClick={() => setShow(true)}>
                    Create
                  </Button>
                </>
              )}
            </>
          }
        />
        {authGuard.hasPermission('admin', 'read') && (
          <DataGrid
            autoHeight
            pagination
            rows={rows}
            rowCount={total}
            columns={columns}
            sortingMode='server'
            paginationMode='server'
            pageSizeOptions={[1, 5, 10, 25, 50]}
            paginationModel={paginationModel}
            onSortModelChange={handleSortModel}
            slots={{ toolbar: ServerSideToolbar }}
            onPaginationModelChange={setPaginationModel}
            slotProps={{
              baseButton: {
                size: 'medium',
                variant: 'tonal'
              },
              toolbar: {
                value: searchValue,
                clearSearch: () => handleSearch(''),
                onChange: event => handleSearch(event.target.value)
              }
            }}
          />
        )}
      </Card>
    </>
  )
}

export default UsersTable
